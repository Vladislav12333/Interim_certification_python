#Знакомство с языком Python. Обучение в записи
#a = 5
#b = 5.66
#c = 'hello'
#Первый способ вывода
#print(f"{a} - {b} - {c}")

#Второй способ вывода
#print("{} - {} - {}".format(a,b,c))



#Ввод данных
#print('Введите первое число: ')
#a = input()
#b = input('Введите второе число: ')
#print(a, ' + ', b, ' = ', a + b)



#Приведение типов данных
#Первый способ вывода
# c = 1
# print(c)
# print(type(c))
# c = bool(c)
# print(c)
# print(type(c))

# #Второй способ вывода
# print('Введите первое число: ')
# a = int(input())
# b = int(input('Введите второе число: '))
# print(a, ' + ', b, ' = ', a + b)


#Округление чисел
# a = 5.89956
# b = 6.556551
# print(round(a*b, 3))

#Сокращенное предсавление
# iter = 2
# iter += 3 # iter = iter + 3
# iter -= 4 # iter = iter - 4
# iter *= 5 # iter = iter * 5
# iter /= 5 # iter = iter / 5
# iter //= 5 # iter = iter // 5
# iter %= 5 # iter = iter % 5
# iter ** = 5# iter = iter ** 5



#Логические операции
# a = 1 > 4
# print(a)
# a = 1 < 4 and 5 > 2
# print(a)
# a = 1 != 2
# print(a)
# a = 1 != 2
# print(a)
# a = 'qwe'
# b = 'qwe'
# print(a == b)
# a = 1 < 3 < 5 < 10
# print(a)



#Управляющие конструкции if, if-else
# username = input('Введите имя: ')
# if username == 'Маша':
#     print('Ура, это же МАША!')
# elif username == 'Марина':
#     print('Я так ждала Вас, Марина!')
# elif username == 'Ильнар':
#     print('Ильнар - топ!')
# else:
#     print('Привет,', username)



#Управляющие конструкции: while и вариация while-else
# i = 0
# while i < 5:
#     if i == 3:
#         break #можно убрать
#     i = i + 1  #можно убрать
# else:
#     print('Пожалуй')
#     print('хватит )')
# print(i)

#Метод флашка
# n = int(input())
# flag = True
# i = 2
# while flag:
#     if n % i == 0: #если остаток при делении числа n на i равен 0
#         flag = False
#         print(i)
#     elif i > n // 2: #делить числа не может превышать введенное число, деленное на 2
#         print(n)
#         flag = False
#     i += 1



#Цикл for, range
# a = 'qwerty'
# for i in a:
#     print(i)

# line = ""
# for i in range(5):
#     line = ""
#     for j in range(5):
#         line += "*"
#         print(line)

#Строка
# text = 'СъЕШЬ ещё этих МяГкИх французских булок'
# print(len(text))
# print('ещё' in text)
# print(text.lower())
# print(text.upper())
# print(text.replace('ещё','ЕЩЁ'))



# Срезы
# text = 'съешь ещё этих мягких французских булок'
# print(text[0])                           # с
# print(text[1])                           # ъ
# print(text[len(text)-1])                 # к
# print(text[-5])                          # б
# print(text[:])                           # съешь ещё этих мягких французских булок
# print(text[:2])                          # съ
# print(text[len(text)-2:])                # ок
# print(text[2:9])                         # ешь ещё
# print(text[6:-18])                       # ещё этих мягких
# print(text[0:len(text):6])               # сеикакл
# print(text[::6])                         # сеикакл
# text = text[2:9] + text[-5] + text[:2]   # ...
# print(text)




#11.01.2024
#Урок 2. Семинар. Ввод-Вывод, операторы ветвления
#Задача №1
#За день машина проезжает n километров. Сколько дней нужно, чтобы проехать маршрут длиной m километров? при решении этой задачи нельзя пользоваться условной инструкцией if и циклами.
# Input:
# n=700
# m=750
# Output:
# 2
#Решение:
# n = int(input())
# m = int(input())
# print((m + n - 1)//n)

#Задача №3
# В некоторой щколе решили набрать три новых математических класса и оборудовать кабинеты для них новыми партами. За каждой партой может сидеть два учащихся. Известно количество учащихся в каждом из трех классов. Выведите наименьшее число парт, которое нужно приобрести для них.
# Input: 20 21 22(ввод чисел НЕ в одну строку)
# Output:32
# Первый вариант решения
# a = int(input("Введите количество учащихся в первом классе: "))
# b = int(input("Введите количество учащихся во втором классе: "))
# c = int(input("Введите количество учащихся в третьем классе: "))
# import math
# p1 = math.ceil(a / 2)
# p2 = math.ceil(b / 2)
# p3 = math.ceil(c / 2)
# p = p1 + p2 + p3
# print("Для трёх классов потребуется", p, "парт.")

#Второй вариант решения
# a = int(input())
# b = int(input())
# c = int(input())
# s1 = (a + 1)//2
# s2 = (b + 1)//2
# s3 = (c + 1)//2
# print(s1 + s2 + s3)



# Задача №5. Вагоны в электричке пронумерованы натуральными числами, начиная с 1 (при этом иногда вагоны нумеруются от "головы" поезда, а иногда - с "хвоста"; это зависит от того, в какую сторону едет электричка). В каждом вагоне написан его номер. Витя сел i-й вагон от головы поезда и обнаружил, что его вагон имеет номер j. Он хочет определить, сколько всего вагонов в электричке. Напишите программу, которая будет это делать или сообщать, что без дополнительной информации это сделать невозможно.
# Input: 3 4(ввод на разных строках)
# Output: 6
# i = int(input())
# j = int(input())
# if i + j == 0:
#     print(-1)
# else:
#     print(i + j -1)



# Задача №7. Дано натуральное число. Требуется определить, является ли год с данным номером високосным. Если год является високосным, то выведите YES, иначе выведите NO. Напомним, что в соответствии с григорианским календарем, год является високосным, если его номер кратен 4, но не кратен 100, а также если он кратен 400.
# Input: 2016
# Output: YES
# n = int(input())
# if n % 4 == 0 and n % 100 != 0 or n % 400 == 0:
#     print("yes")
# else:
#     print("no")



#Урок 3. Семинар. Циклы (for, while)

# Задача №9. По данному целому неотрицательному n вычислите значение n!. N! = 1 * 2 * 3 * ... * N (произведение всех чисел от 1 до N) O! = 1 Решить задачу используя цикл while
# Input: 5
# Output: 120

# n = int(input())
# i = 1
# result = 1
# while i <= n:
#     result *=i
#     i += 1
# print(result)



# Задача №11. Дано натуральное число А > 1. Определите, каким по счету числом Фибоначи оно является, то есть выведите такое число n, что φ(n)=A. Если А не является числом Фибоначчи, выведите число -1.
# Input: 5
# Output: 6
# n = int(input())
# n0 = 0
# n1 = 0
# n2 = 1
# i = 2
# while n0 < n:
#     n0 = n1 + n2
#     n1 = n2
#     n2 = n0
#     i += 1
#     if n0 > n:
#         i = -1
# print(i)



# Задача №13. Уставшие от необычно теплой зимы, жители решили узнать, действительно ли это самая длиная оттепель за всю историю наблюдений за погодой. Они обратились к синоптикам, а те, в свою очередь, занялись исследованиями статистики за прошлые годы. Их интересует, сколько дней длилась самая длиная оттепель. Оттепелю они называют период, в который среднесуточная температура ежедневно превышала 0 градусов Цельсия. Напишите программу, помогающую синоптикам в работе.
# Пользователь вводит число N - общее количество рассматриваемых дней (1 ≤ N ≤ 100). В следующих строках располагается N целых чисел.
# Каждое число - среднесуточная температура в соответствующий день. температуры - целые числа и лежат в диапазоне от -50 до 50
# Input: 5 -> -20 30 -40 50 10 -10
# Output: 2
# n = int(input())
# k = 0
# max = 0
# for i in range(n):
#     x = int(input())
#     if x > 0:
#         k += 1
#     else:
#         if max < k:
#             max = k
#             k = 0
# print(max)



# Задача №15. Иван Васильевич пришел на рынок и решил купить два арбуза: один для себя, а другой для тещи. Понятно, что для себя нужно выбрать арбуз потяжелей, а для тещи полегче. Но вот незадача: арбузов слишком много и он не знает как же выбратьсамый легкий и самый тяжелый арбуз? Помогите ему!
# Пользователь вводит одно число N - количество арбузов. Вторая строка содержит N чисел, записанных на новой строчке каждое. Здесь каждое число - это масса соответствующего арбуза. Все числа натуральные и не превышают 3000
# Input: 5 -> 5 1 6 5 9
# Output: 19
# n = int(input())
# max = -1
# min = 30001
# for i in range(n):
#     x = int(input())
#     if x > max:
#         max = x
#     if x < min:
#         min = x
# print(max, min)



# Практическое задание
# Задача №1
# На столе лежат n монеток. Некоторые из монеток лежат вверх решкой, а некоторые – гербом. Ваша задача - определить минимальное количество монеток, которые нужно перевернуть, чтобы все монетки лежали одной и той же стороной вверх.
# Входные данные:
# На вход программе подается список coins, где coins[i] равно 0, если i-я монетка лежит гербом вверх, и равно 1, если i-я монетка лежит решкой вверх. Размер списка не превышает 1000 элементов.
# Выходные данные:
# Программа должна вывести одно целое число - минимальное количество монеток, которые нужно перевернуть.
# Пример использования На входе:
# coins = [0, 1, 0, 1, 1, 0]
# На выходе:
# 3

# # Находим количество монеток, лежащих гербом вверх
# heads = coins.count(0)
# # Находим количество монеток, лежащих решкой вверх
# tails = coins.count(1)
# # Находим минимальное количество монеток, которые нужно перевернуть
# flips = min(heads, tails)
# # Выводим результат
# print(flips)
# 2 вариант решения:
# count_zero = 0
# count_one = 0
# for coin in coins:
#     if coin == 0:
#         count_zero += 1
#     else:
#         count_one += 1
# if count_one > count_zero:
#     print(count_zero)
# else:
#     print(count_one)



# Задача №2
# Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.
# Примечание: числа S и P задавать не нужно, они будут передаваться в тестах. В результате вы должны вывести все возможные пары чисел X и Y через пробел, такие что X <= Y.
# Пример:
# На входе:
# s = 12
# p = 27
# На выходе:
# 3 9

# solutions = []
# for i in range(1, 1001):
#     for j in range(1, 1001):
#         if s == i + j and p == i * j:
#             solutions.append((min(i, j), max(i, j)))
# solutions = list(set(solutions))
# for solution in solutions:
#     print(solution[0], solution[1])

# 2 вариант решения:
# for i in range(p):
#     if i == 0 or p % i != 0: continue
#     y = p // i
#     x = p // y
# if x + y == s:
#         print(x,y)
#         break



# Задача №3
# Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числаN.
# Пример
# n=16
# На входе:
# 1
# 2
# 4
# 8
# 16
# Решение:
# n = 16
# p = 1
# while p <= n:
#     print(p, sep = "\\n")
#     p = p * 2
# 2 вариант решения:
# i = 0
# while 2 ** i <= n:
#     print(2 ** i)
#     i += 1



#Урок 4. Лекция. Коллекции данных. Профилирование и отладка
# list_1 = []
# print(list_1)
# for i in range(5):
#     list_1.append(i)
#     print(list_1)

# Основные функции которые могут быть в списках:
# Удаление последнего элемента списка.
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop()) # 0
# print(list_1) # [12, 7, -1, 21]
# print(list_1.pop()) # 21
# print(list_1) # [12, 7, -1]
# print(list_1.pop()) # -1
# print(list_1) # [12, 7]

# Удаление конкретного элемента из списка:
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop()) # 12
# print(list_1) # [7, -1, 21, 0]

# Добавление элемента на нужную позицию:
# list_1 = [12, 7, -1, 21, 0]
# print(list1.insert(2, 11))
# print(list1) # [12, 7, 11, -1, 21, 0]

#Работа со срезами:
# list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[0]) #1
# print(list_1[1]) #2
# print(list_1[len(list_1)-1]) #10
# print(list_1[-5]) #6
# print(list_1[:]) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[:2]) #[1, 2]
# print(list_1[len(list_1)-2:]) #[9, 10]
# print(list_1[2:9]) #[3, 4, 5, 6, 7, 8, 9]
# print(list_1[6:-18]) #[]
# print(list_1[0:len(list_1):6]) #[1, 7]
# print(list_1[::6]) #[1, 7]

#Кортежи
# t = ()
# print(type(t))
# t = (1, 5, 3)
# print(type(t))
# v = [1, 8, 9]
# print(v)
# print(type(v))
# v = tuple(v)
# print(v)
# print(type(v))

# Словари
# d = {}
# d = dict()
# d['q'] = 'qwerty'
# print(d)
# d['w'] = 'werty'
# print(d['q'])
# Пример:
# dictionary = {}
# dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary) # {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary['left']) # ←
# # типы ключей могут отличаться
# print(dictionary['up']) # ↑
# # типы ключей могут отличаться
# dictionary['left'] = '⇐'
# print(dictionary['left']) # ⇐
# print(dictionary['type']) # KeyError: 'type'
# del dictionary['left'] # удаление элемента
# for item in dictionary: # for (k,v) in dictionary.items():
#     print('{}: {}'.format(item, dictionary[item]))
#up: ↑
#down: ↓
#right: →

# Множества
# colors = {'red', 'green', 'blue'}
# print(colors) # {'red', 'green', 'blue'}
# colors.add('red')
# print(colors) # {'red', 'green', 'blue'}
# colors.add('gray')
# print(colors) # {'red', 'green', 'blue', 'gray'}
# colors.remove('red')
# print(colors) # {'green', 'blue', 'gray'}
# colors.remove('red') # ReyError: 'red'
# colors.discard('red') # ok
# print(colors) # {'green', 'blue', 'gray'}
# colors.clear() # { }
# print(colors) # set()

#Операции со множествами в Python
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 6, 13, 21}
# c = a.copy()  # c = {1, 2, 3, 5, 8}
# u = a.union(b)  # u = {1, 2, 3, 5, 8, 13, 21}
# i = a.intersection(b)  # i = {8, 2, 5}
# dl = a.difference(b)  # dl = {1, 3}
# dr = b.difference(a)  # dr = {13, 21}
# q = a.union(b).difference(a.intersection(b))  # {1, 21, 3, 13}

# Задача №1
# Создать список, состоящий из четных чисел в диапазоне от 1 до 100
# Решение:
# 1. Создать списак чисел от 1 до 100
# list_1 = []
# for i in range(1, 101):
#     list_1.append(i)
# print(list_1) # [1, 2, 3, ..., 100]
# Эту же функцию можно записать так:
# list_1 = [i for i in range(1, 101)] # [1, 2, 3, ..., 100]

# Задача №2
# Добавить условие (только чётные числа)
# list_1 = [i for i in range(1, 101) if i % 2 == 0] # [2, 4, 6, ..., 100]
# Допустим, вы решили создать пары каждому из чисел (кортежи)
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] # [(2, 2), (4, 4), ..., (100, 100)]
# Также можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_1) # [0, 4, 8, 12, 16]

# Ошибки
# SyntaxError(Синтаксическая ошибка)
# number_first = 5
# number_second = 7
# if number_first > number_second #!!!!
#     print(number_first)
#Отсутствие :

# IndentationError(Ошибка отступов)
# number_first = 5
# number_second = 7
# if number_first > number_second:
# print(number_first) #!!!!!
#Отсутствие отступов

# TypeError(Типовая ошибка)
# text = 'Python'
# number = 5
# print(text + number)
#Нельзя складывать строки и числа

# ZeroDivisionError(Деление на 0)
# number_first = 5
# number_second = 0
# print(number_first // number_second)
# Делить на 0 нельзя

# KeyError(Ошибка ключа)
# dictionary = {1: 'Monday', 2: 'Tuesday'}
# print(dictionary[3])
# Такого ключа не существует

# NameError(Ошибка имени переменной)
# name = 'Ivan'
# print(names)
# Переменной names не существует

# ValueError(Ошибка значения)
# text = 'Python'
# print(int(text))
# Нельзя символы перевести в целые значения



#Урок 5. Семинар. Списки и словари
# Задача №17
# Дан список чисел. Определите, сколько в нем встречается различных чисел.
# Input: [1,1,2,0,-1,3,4,4]
# Output:6
# Примечание: Пользователь может вводить значения списка или список задан изначально.
# Решение:
# 1 вариант решения
# Вводим список чисел
# numbers = [1, 1, 2, 0, -1, 3, 4, 4]
# Преобразуем список в множество
# unique_numbers = set(numbers)
# Выводим длину множества, то есть количество различных чисел
# print(len(unique_numbers))
# 2 вариант решения
# list1 = [1, 1, 2, 3, 5, 5]
# print(len(set(list1)))

# Задача №19
# Дана последовательность из N целых чисел и число K. Необходимо сдвинуть всю последовательность (сдвиг-циклический) на K элементов вправо, K - положительное число.
# Input: [1, 2, 3, 4, 5] k = 3
# Output: [3, 4, 5, 1, 2]
# Примечание: Пользователь может вводить значения списка или список задан изначально.
# Решение:
# 1 вариант решения
# Вводим список чисел
#numbers = [1, 2, 3, 4, 5]
# Вводим число шагов сдвига
#k = 3
# Вычисляем длину списка
#n = len(numbers)
# Выполняем циклический сдвиг, используя срезы
#shifted_numbers = numbers[n - k:] + numbers[:n - k]
# Выводим результат
#print(shifted_numbers)
# 2 вариант решения
# list1 = [5, 4, 6, 7, -10]
# k = int(input())
# k = k % len(list1)
# list_res = []
# for i in range(k):
#     list_res.append(list1[len(list1) - 1 - i])
# print(list_res)
# for i in range(len(list1) - k):
#     list_res.append(list1[i])
# print(list_res)

# Задача №21
# Напишите программу для печати всех уникальных значений в словаре.
# Input: [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V": "S009"}, {"VIII": "S007"}]
# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}
# Примечание: Список словарей задан изначально. Пользователь его не вводит.
# Решение:
# 1 вариант решения
# Создаем список словарей с исходными данными
# input = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V": "S009"}, {"VIII": "S007"}]
# # Создаем множество из значений словарей в списке с помощью генератора множества
# output = {value for dictionary in input for value in dictionary.values()}
# # Печатаем результат
# print(output)
# 2 вариант решения
# list_1 = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V": "S009"}, {"VIII": "S007"}]
# set_1 = set()
# for i in list_1:
#     for j in i:
#         set_1.add(i[j])
# print(set_1)

# Задача №23
# Дан массив, состоящий из целых чисел. Напишите программу, которая подсчитает количество элементов массива, больших предыдущего (элемента с предыдущим номером).
# Input: [0, -1, 5, 2, 3]
# Output: 2 (-1 < 5, 2 < 3)
# Примечание: Пользователь может вводить значения списка или список задан изначально.
# Решение:
# 1 вариант решения
# Вводим массив с исходными данными или используем заданный массив
#array = input("Введите массив целых чисел через пробел: ").#split()
# Преобразуем строки в целые числа
#array = [int(x) for x in array]
# Или используем заданный массив
# array = [0, -1, 5, 2, 3]
# Создаем переменную для подсчета количества элементов, больших предыдущего
#count = 0
# Перебираем элементы массива, начиная со второго
#for i in range(1, len(array)):
    # Сравниваем текущий элемент с предыдущим
#    if array[i] > array[i-1]:
        # Увеличиваем счетчик на 1
#        count += 1
# Печатаем результат
#print(count)
# 2 вариант решения
# list_1 = [0, -1, 5, 2, 3]
# count = 0
# for i in range(1, len(list_1)):
#     if list_1[i] > list_1[i-1]:
#         count += 1
# print(count)



# Практическое задание
# Задача №1
# Требуется вычислить, сколько раз встречается некоторое число k в массиве list_1.
# Найдите количество и выведите его.
# Пример:
# list_1 = [1, 2, 3, 4, 5]
# k = 3
# # 1
# Решение:
# list_1 = [1, 2, 3, 4, 5]
# k = 3
# print(list_1.count(k))
#
# 2 вариант решения задачи:
# count = 0
# for i in range(len(list_1)):
#     if list_1[i] == k:
#         count += 1
# print(count)

# Задача №2
# Требуется найти в массиве list_1 самый близкий по значению элемент к заданному числу k и вывести его.
# Считать, что такой элемент может быть только один. Если значение k совпадает с этим элементом - выведите его.
# Пример:
# list_1 = [1, 2, 3, 4, 5]
# k = 6
# # 5
# Решение:
# list_1 = [1, 2, 3, 4, 5]
# k = 6:
# print(min(list_1, key=lambda x: abs(x - k)))
#
# 2 вариант решения задачи:
# m = abs(k - list_1[0])  # модуль числа
# number = list_1[0]
# for i in range(1, len(list_1)):
#     if m > abs(list_1[i] - k):
#         m = abs(list_1[i] - k)
#         number = list_1[i]
# print(number)

# Задача №3
# В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность.
# В случае с английским алфавитом очки распределяются так:
# A, E, I, O, U, L, N, S, T, R – 1 очко;
# D, G – 2 очка;
# B, C, M, P – 3 очка;
# F, H, V, W, Y – 4 очка;
# K – 5 очков;
# J, X – 8 очков;
# Q, Z – 10 очков.
# А русские буквы оцениваются так:
# А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# Д, К, Л, М, П, У – 2 очка;
# Б, Г, Ё, Ь, Я – 3 очка;
# Й, Ы – 4 очка;
# Ж, З, Х, Ц, Ч – 5 очков;
# Ш, Э, Ю – 8 очков;
# Ф, Щ, Ъ – 10 очков.
# Напишите программу, которая вычисляет стоимость введенного пользователем слова k и выводит его. Будем считать, что на вход подается только одно слово, которое содержит либо только английские, либо только русские буквы.
# Пример:
# k = 'ноутбук'
# # 12
# Решение:
# # Словарь с ценностью букв для английского алфавита
# english_values = {
#     'A': 1, 'E': 1, 'I': 1, 'O': 1, 'U': 1, 'L': 1, 'N': 1, 'S': 1, 'T': 1, 'R': 1,
#     'D': 2, 'G': 2,
#     'B': 3, 'C': 3, 'M': 3, 'P': 3,
#     'F': 4, 'H': 4, 'V': 4, 'W': 4, 'Y': 4,
#     'K': 5,
#     'J': 8, 'X': 8,
#     'Q': 10, 'Z': 10
# }
# # Словарь с ценностью букв для русского алфавита
# russian_values = {
#     'А': 1, 'В': 1, 'Е': 1, 'И': 1, 'Н': 1, 'О': 1, 'Р': 1, 'С': 1, 'Т': 1,
#     'Д': 2, 'К': 2, 'Л': 2, 'М': 2, 'П': 2, 'У': 2,
#     'Б': 3, 'Г': 3, 'Ё': 3, 'Ь': 3, 'Я': 3,
#     'Й': 4, 'Ы': 4,
#     'Ж': 5, 'З': 5, 'Х': 5, 'Ц': 5, 'Ч': 5,
#     'Ш': 8, 'Э': 8, 'Ю': 8,
#     'Ф': 10, 'Щ': 10, 'Ъ': 10
# }
# # Определяем, какой алфавит использовать
# if k[0].upper() in english_values:
#     values = english_values # Английский алфавит
# else:
#     values = russian_values # Русский алфавит
# # Вычисляем сумму ценности букв
# total = 0
# for letter in k.upper():
#     total += values[letter]
# # Выводим результат
# print(total)
#
# 2 вариант решения задачи:
# points_en = {1: 'AEIOULNSTR', 2: 'DG', 3: 'BCMP', 4: 'FHVWY', 5: 'K', 8: 'JX', 10: 'QZ'}
# points_ru = {1: 'АВЕИНОРСТ', 2: 'ДКЛМПУ', 3: 'БГЁЬЯ', 4: 'ЙЫ', 5: 'ЖЗХЦЧ', 8: 'ШЭЮ', 10: 'ФЩЪ'}
# word = k.upper()  # переводим все буквы в верхний регистр
# count = 0
# for i in word:
#     if i in 'QWERTYUIOPASDFGHJKLZXCVBNM':
#         for j in points_en:
#             if i in points_en[j]:
#                 count = count + j
#     else:
#         for j in points_en:
#             if i in points_ru[j]:
#                 count = count + j
# print(count)



# Урок 6. Семинар. Словари, множества и профилирование
# Задача №25
# Напишите программу, которая принимает на вход строку, и отслеживает, сколько раз каждый символ уже встречался. Количество повторов добавляется к символам с помощью постфикса формата _n.
# Input: aaabcaadcdd
# Output: aa_1a_2bca_3a_4dc_1d_1d_2
# Для решения данной задачи используйте функцию .split()
# 1 Вариант решения задачи (без функции .split()):
# Вводим строку
# s = input('Введите строку: ')
# # Создаем словарь с количеством повторов каждого символа
# counts = {}
# for c in s:
#     counts[c] = counts.get(c, 0) + 1
# # Создаем новую строку с постфиксами
# new_s = ''
# for c in s:
#     new_s += c + '_' + str(counts[c])
#     counts[c] -= 1 # Уменьшаем количество повторов на 1
# # Выводим результат
# print('Новая строка:', new_s)
#
# 2 Вариант решения задачи
# stroka = input().split()
# res = {}
# for i in stroka:
#     if i in res:
#         print(f'{i}_{res[i]}', end=' ')
#     else:
#         print(i, end=' ')
#     res[i] = res.get(i, 0) + 1



# # Задача №25
# # Пользователь вводит текст(строка). Словом считается последовательность непроблемных символов идущих подряд, слова разделены одним или большим числом пробелов. Определите, сколько различных слов содержится в этом тексте.
# # Input: She sells sea shells on the sea shore The shells that she sells are sea shells I'm sure.So if she sells sea shells on the sea shore I'm sure that the shells are sea shore shells
# # Output: 13
# # 1 Вариант решения задачи:
# # Прочитать текст, введенный пользователем, и сохранить его в переменную text
# text = input("Введите текст: ")
# # Разделить текст на слова, используя метод split(), и сохранить список слов в переменную words
# words = text.split()
# # Создать пустое множество unique_words, которое будет хранить только уникальные слова из списка words
# unique_words = set()
# # Пройтись по списку words в цикле for и добавлять каждое слово в множество unique_words, используя метод add()
# for word in words:
#     unique_words.add(word)
# # Подсчитать количество элементов в множестве unique_words, используя функцию len(), и сохранить его в переменную output
# output = len(unique_words)
# # Вывести значение переменной output на экран, используя функцию print()
# print("Количество различных слов в тексте:", output)

# # 2 Вариант решения задачи:
# stroka = input().split()
# set_1 = set()
# for i in stroka:
#     set_1.add(i.lower())
# print(len(set_1))

# Задача №29
# Ваня и Петя поспорили, кто быстрее решит следующую задачу: "Задана последовательность неотрицательных целых чисел. Требуется определить значение наибольшего элемента последовательности, которая завершается первым встретившимся нулем (число 0 не входит в последовательность)". Однако 2 друга оказались не такими смышленными. Никто из ребят не смог до конца сделать это задание. Они решили так: у кого будет меньше ошибок в коде, тот и выиграл спор. За помощью товарищи обратились к Вам, студентам.
# Примечание: Программные коды на следующих слайдах.
# Решение:
# Ваня: (2 ошибки)
# n = int(input())
# max_number = 1000
# while n != 0:
# 	n = int(input())
# 	if max_number > n:
# 		max_number = n
# print(max_number)
#
# Петя: (3 ошибки)
# n = int(input())
# max_number = -1
# while n < 0:
# 	n = int(input())
# 	if max_number < n:
# 		n = max_number
# print(n)



# Практическое задание
# Задача №1
# Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# На вход подается 2 числа через пробел: n m
# n - кол-во элементов первого множества.
# m - кол-во элементов второго множества.
# Затем подаются элементы каждого множества через пробел в виде строки. ! Писать input() не надо
#
# Пример
# На входе:
# var1 = '5 4' # количество элементов первого и второго множества
# var2 = '1 3 5 7 9' # элементы первого множества через пробел
# var3 = '2 3 4 5' # элементы второго множества через пробел
# На выходе:
# 3 5
#
# Решение:
# # Преобразуем строки в списки целых чисел
# var1 = list(map(int, var1.split()))
# var2 = list(map(int, var2.split()))
# var3 = list(map(int, var3.split()))
# # Извлекаем количество элементов первого и второго множества
# n, m = var1[0], var1[1]
# # Создаем множества из списков, чтобы убрать повторения
# set1 = set(var2)
# set2 = set(var3)
# # Находим пересечение множеств, то есть общие элементы
# intersection = set1 & set2
# # Сортируем пересечение по возрастанию
# sorted_intersection = sorted(intersection)
# # Выводим результат через пробел
# print(*sorted_intersection)
#
# 2 вариант решения задачи:
# mol = [int(x) for x in var1.split()]
# n = mol[0]
# m = mol[1]
# set_1 = set()
# set_2 = set()
# list_1 = list()
# a = [int(x) for x in var2.split()]
# k = set(a)
# for i in k:
#    set_1.add(i)
# b = [int(x) for x in var3.split()]
# k1 = set(b)
# for i in k1:
#    set_2.add(i)
# lok = set_1 & set_2
# kool = list(lok)
# kool.sort()
# for i in kool:
#    print(i, end=' ')

# Задача №2
# В фермерском хозяйстве в Карелии выращивают чернику. Черника растет на круглой грядке, и кусты черники высажены по окружности грядки. Каждый куст черники имеет урожайность, которая соответствует количеству ягод на этом кусте.
# Урожайность черничных кустов представлена в виде списка arr, где arr[i] - это урожайность (количество ягод) i-го куста.
# В фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. Каждый собирающий модуль может собрать ягоды с одного куста и с двух соседних кустов. Собирающий модуль находится перед определенным кустом, и он может выбирать, с какого куста начать сбор ягод.
# Ваша задача - написать программу, которая определит максимальное число ягод, которое может собрать один собирающий модуль за один заход, находясь перед некоторым кустом грядки.
# Входные данные:
# На вход программе подается список arr, где arr[i] (1 ≤ arr[i] ≤ 1000) - урожайность i-го куста черники. Размер списка не превышает 1000 элементов.
# Выходные данные:
# Программа должна вывести одно целое число - максимальное количество ягод, которое может собрать собирающий модуль, находясь перед некоторым кустом грядки.
# Пример использования На входе:
# arr = [5, 8, 6, 4, 9, 2, 7, 3]
# На выходе:
# 19
# Решение:
# # Преобразуем список в целые числа
# arr = list(map(int, arr))
# # Находим длину списка
# n = len(arr)
# # Инициализируем максимальное количество ягод
# max_berries = 0
# # Перебираем все возможные позиции собирающего модуля
# for i in range(n):
#     # Вычисляем количество ягод, которое может собрать модуль, начиная с i-го куста
#     # Используем оператор % для обработки краевых случаев, когда i = n-1 или i = n-2
#     berries = arr[i] + arr[(i+1) % n] + arr[(i+2) % n]
#     # Обновляем максимальное количество ягод, если текущее больше
#     max_berries = max(max_berries, berries)
# # Выводим результат
# print(max_berries)
#
# 2 вариант решения задачи:
# arr_count = list()
# for i in range(len(arr) - 1):
#     arr_count.append(arr[i - 1] + arr[i] + arr[i + 1])
# arr_count.append(arr[-2] + arr[-1] + arr[0])
# # Вывод максимальной урожайности, которую может собрать собирающий модуль
# print(max(arr_count))



# Урок 7. Лекция. Функции, рекурсия, алгоритмы
# Задача №1
# Необходимо создать функцию sumNumbers(n), которая будет считать сумму всех элементов от 1 до n.
# Решение:
# 1. Необходимо создать функцию:
# 		def sumNumbers(n):
# Очень важно понимать одну вещь, сколькоаргументов мы передаем, столько и принимаем. Или наоборот сколько аргументов мы понимаем, столько и передаем.
# В нашем случае функция sumNumbers принимает 1 аргумент(n).принимает 1 аргумент(n).
#Решение:
# def sum_numbers(n, y = 'Hello'):
#     print(y)
#     summa = 0
#     for i in range(1, n + 1):
#         summa += i
#     return summa
# a = sum_numbers(5, 'qwer')
# print(a)
#
# def sum_str(*args):
#     res = ''
#     for i in args:
#         res += i
#     return res
# print(sum_str('q', 'e', 'l'))
# print(sum_str('q', 'e', 'l', 'r', 'f'))
# print(sum_str(1, 8, 9))
